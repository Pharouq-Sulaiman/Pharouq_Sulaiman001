library(tidytext)
library(tidyverse)
view(sentiments)
#adding the lexicon type stating positive or negative
bing <- get_sentiments("bing")
afinn <- get_sentiments("afinn")
#calling the janeaustenr library for the austen books
library(janeaustenr)
austenBooks<- austen_books()

library(janeaustenr)
library(stringr)
library(tidytext)
tidy_data <-austen_books() %>%
  group_by(book) %>%
  mutate(linenumber = row_number(),
         chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", 
                                                 ignore_case = TRUE)))) %>%
  ungroup() %>%
  unnest_tokens(word, text)
tidy_data()
austen_books
?regex
#function () 
#{
# books <- list(`Sense & Sensibility` = janeaustenr::sensesensibility, 
#               `Pride & Prejudice` = janeaustenr::prideprejudice, `Mansfield Park` = janeaustenr::mansfieldpark, 
#                Emma = janeaustenr::emma, `Northanger Abbey` = janeaustenr::northangerabbey, 
#                Persuasion = janeaustenr::persuasion)
#  ret <- data.frame(text = unlist(books, use.names = FALSE), 
#                    stringsAsFactors = FALSE)
# ret$book <- factor(rep(names(books), sapply(books, length)))
#  ret$book <- factor(ret$book, levels = unique(ret$book))
#  structure(ret, class = c("tbl_df", "tbl", "data.frame"))
#}
#<bytecode: 0x000002459c50fee8>
# <environment: namespace:janeaustenr>
#counting the positive words only in book= emma
positive_senti <- get_sentiments("bing") %>%
  filter(sentiment == "positive")
positiveEmma <- tidy_data %>%
  filter(book == "Emma") %>%
  semi_join(positive_senti) %>%
  count(word, sort = TRUE)
emma <- tidy_data%>%
  filter(book=="Emma")
#we specify based on 80 lines whuch is positive, which is negative
library(tidyr)
bing <- get_sentiments("bing")
Emma_sentiment <- tidy_data %>%
 inner_join(bing) %>%
 count(book = "Emma" , index = linenumber %/% 80, sentiment) %>%
 spread(sentiment, n, fill = 0) %>%
 mutate(sentiment = positive - negative) 
#visualizations
library(ggplot2)
ggplot(Emma_sentiment, aes(index, sentiment, fill = book)) +
  geom_bar(stat = "identity", show.legend = TRUE) +
  facet_wrap(~book, ncol = 2, scales = "free_x")
#word count
counting_words <- tidy_data %>%
  inner_join(bing) %>%
  count(word, sentiment, sort = TRUE)
head(counting_words)

counting_words %>%
  filter(n > 150) %>%
  mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(word, n, fill = sentiment))+
  geom_col() +
  coord_flip() +
  labs(y = "Sentiment Score")
#comparisoncloud
library(reshape2)
library(wordcloud)
tidy_data %>%
  inner_join(bing) %>%
  count(word, sentiment, sort = TRUE) %>%
  acast(word ~ sentiment, value.var = "n", fill = 0) %>%
  comparison.cloud(colors = c("red", "darkgreen"),
                   max.words = 100)

